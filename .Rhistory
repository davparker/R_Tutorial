add(ggtitle('Names starting with "Ste"')) %>%
print
babynames %>%
filter(name %>% substr(1, 3) %>% equals("Dav")) %>%
group_by(year, sex) %>%
summarize(total = sum(n)) %>%
qplot(year, total, color = sex, data = ., geom = "line") %>%
add(ggtitle('Names starting with "Ste"')) %>%
print
babynames %>%
filter(name %>% substr(1, 3) %>% equals("David")) %>%
group_by(year, sex) %>%
summarize(total = sum(n)) %>%
qplot(year, total, color = sex, data = ., geom = "line") %>%
add(ggtitle('Names starting with "David"')) %>%
print
babynames %>%
filter(name %>% substr(1, 3) %>% equals("Dav")) %>%
group_by(year, sex) %>%
summarize(total = sum(n)) %>%
qplot(year, total, color = sex, data = ., geom = "line") %>%
add(ggtitle('Names starting with "Dav"')) %>%
print
set.seed(1)  # Makes the call to rnorm generate the same numbers every time
( mymat <- matrix(round(rnorm(16,10),2),4,4) )
mean(mymat[,1])
mean(mymat[,2])
mean(mymat[,3])
mean(mymat[,4])
( mymatcolmean <- c(mean(mymat[,1]),mean(mymat[,2]),mean(mymat[,3]),mean(mymat[,4])) )
retvec <- vector()
for (ii in 1:ncol(mymat)) {
retvec[ii] = mean(mymat[,ii])
}
retvec
myloop <- function(somemat) {
retvec <- vector()
length(retvec) <- ncol(somemat)
for (ii in 1:ncol(somemat)) {
retvec[ii] <- mean(somemat[,ii])
}
return(retvec)
}
myloop(mymat)
set.seed(1)
newmat <- matrix(rnorm(100),10,10)
myloop(newmat)
myloop <- function(somemat,rc=2) {
retvec <- vector()
length(retvec) <- ncol(somemat)
# Check to see if we are taking the mean of the columns or rows
# 1 indicates rows, 2 indicates columns
if (rc == 2) {
for (ii in 1:ncol(somemat)) {
retvec[ii] <- mean(somemat[,ii])
}
} else {
for (ii in 1:nrow(somemat)) {
retvec[ii] <- mean(somemat[ii,])
}
}
return(retvec)
}
myloop(mymat,2)   # This is correct
myloop(mymat,1)   # This is correct
mean(mymat[1,])  # A spot check
apply(mymat, 2, mean)
apply(mymat, 1, mean)
dim(myat)
dim(mymat)
apply(mymat,2,class)  # What class do the columns belong to ?
apply(mymat,2,sum)    # Get the sum of all the columns
apply(mymat,1,range)  # Get the range of all rows
apply(mymat,2,fivenum) # Get the fivenum summary for each column
rowMeans(mymat)     # Equivalent to apply(mymat,1,mean)
colMeans(mymat)     # Equivalent to apply(mymat,2,mean)
rowSums(mymat)      # Equivalent to apply(mymat,1,sum)
colSums(mymat)      # Equivalent to apply(mymat,2,sum)
devtools::install_github("assertthat")
devtools::install_github("bigrquery")
library(bigrquery)
project <- "decisive-circle-666 " # put your projectID here
sql <- 'SELECT title,contributor_username,comment FROM[publicdata:samples.wikipedia] WHERE title CONTAINS "beer" LIMIT 100;'
data <- query_exec("publicdata", "samples", sql, billing = project)
data
data()
mydata <- query_exec("publicdata", "samples", sql, billing = project)
project <- "decisive-circle-666" # put your projectID here
sql <- 'SELECT title,contributor_username,comment FROM[publicdata:samples.wikipedia] WHERE title CONTAINS "beer" LIMIT 100;'
mydata <- query_exec("publicdata", "samples", sql, billing = project)
mydata
.07 * 24 * 365
.07 * 24
.07 * 24 * 365
library(resolv)
install.packages('resolv')
library(devtool)
library(devtools)
devtools::install_github('resolv')
library(devtools)
install_github("hrbrmstr/resolv")
library(MinGW)
install.packages('MinGW')
install_github('MinGW')
install_github("hrbrmstr/resolv")
install.packages('resolv')
explain_causes <- function(spread, colx, peakyears) {
for(i in peakyears) {
grpyrs <- tidy$year >= (i-spread) & tidy$year <= (i+spread)
if(colx == "harm")
aaa <- aggregate(harm ~ EVTYPE, data=tidy[grpyrs,],sum)
if(colx == "damage")
aaa <- aggregate(damage ~ EVTYPE, data=tidy[grpyrs,],sum)
.
.
.
}
}
data<-data.frame(Stat11=rnorm(100,mean=3,sd=2),
Stat21=rnorm(100,mean=4,sd=1),
Stat31=rnorm(100,mean=6,sd=0.5),
Stat41=rnorm(100,mean=10,sd=0.5),
Stat12=rnorm(100,mean=4,sd=2),
Stat22=rnorm(100,mean=4.5,sd=2),
Stat32=rnorm(100,mean=7,sd=0.5),
Stat42=rnorm(100,mean=8,sd=3),
Stat13=rnorm(100,mean=6,sd=0.5),
Stat23=rnorm(100,mean=5,sd=3),
Stat33=rnorm(100,mean=8,sd=0.2),
Stat43=rnorm(100,mean=4,sd=4))
boxplot(data,  las = 2,  col =
c("red","sienna","palevioletred1","royalblue2","red","sienna","palevioletred1","royalblue2","red","sienna","palevioletred1","royalblue2"),
at = c(1,2,3,4, 6,7,8,9, 11,12,13,14),
par(mar = c(6, 5, 4, 2) + 0.1),
names = c("","","","","","","","","","","",""),
ylim=c(-6,18))
library("ggplot2")
mtext("Station1", side=1, line=1, at=1, las=2, font=1, col="red")
mtext("Station2", side=1, line=1, at=2, las=2, font=2, col="sienna")
mtext("Station3", side=1, line=1, at=3, las=2, font=3, col="palevioletred1")
mtext("Station4", side=1, line=1, at=4, las=2, font=4, col="royalblue2")
mtext("Station1", side=1, line=1, at=6, las=2, font=1, col="red")
mtext("Station2", side=1, line=1, at=7, las=2, font=2, col="sienna")
mtext("Station3", side=1, line=1, at=8, las=2, font=3, col="palevioletred1")
mtext("Station4", side=1, line=1, at=9, las=2, font=4, col="royalblue2")
mtext("Station1", side=1, line=1, at=11, las=2, font=1, col="red")
mtext("Station2", side=1, line=1, at=12, las=2, font=2, col="sienna")
mtext("Station3", side=1, line=1, at=13, las=2, font=3, col="palevioletred1")
mtext("Station4", side=1, line=1, at=14, las=2, font=4, col="royalblue2")
#Axis labels
mtext("Time", side = 1, line = 6, cex = 2, font = 3)
mtext("Oxigen (%)", side = 2, line = 3, cex = 2, font = 3)
#In-plot labels
text(1,-4,"*")
text(6,-4,"*")
text(11,-4,"*")
text(2,9,"A",cex=0.8,font=3)
text(7,11,"A",cex=0.8,font=3)
text(12,15,"A",cex=0.8,font=3)
source('~/GitHub/R_Tutorial/plott_lines_example.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library('ggplot2')
source('~/.active-rstudio-document', echo=TRUE)
library(datasets)
data(titanic)
titantic <- read.csv('data/titanic.csv')
mosaicplot(Titanic, main = "Survival on the Titanic")
library(datasets)
require(graphics)
mosaicplot(Titanic, main = "Survival on the Titanic")
apply(Titanic, c(3, 4), sum)
apply(Titanic, c(2, 4), sum)
data(Titanic)
mosaicplot(Titanic, main = "Survival on the Titanic")
summary(Titanic)
summary(titanic)
summary(titantic)
titanic <- read.csv('data/titanic.csv')
summary(Titanic)
dim(Titanic)
dim(titanic)
names(Titanic)
class(Titanic)
?Titanic
?Titanic
require(graphics)
titanic <- read.csv('data/titanic.csv')
data(Titanic)
mosaicplot(Titanic, main = "Survival on the Titanic")
apply(Titanic, c(3, 4), sum)
apply(Titanic, c(2, 4), sum)
library('dplyr')
t1.table <- diamonds %>% group_size(clarity, cut)
t3.table <- diamonds %>% group_by(clarity, cut) %>% summarise(nrow=n())
# library('plyr')
t1.table <- diamonds %>% group_size(clarity, cut)
library('datasets')
t1.table <- diamonds %>% group_size(clarity, cut)
data(diamonds)
datasets::
datasets::diamonds
data(package = plyr, diamonds)
data(package = 'plyr', diamonds)
t1.table <- diamonds %>% group_size(clarity, cut)
library('plyr')
table(diamonds$cut)
library('dplyr')
table(diamonds$cut)
library('plyr')
table(diamonds$cut)
library('ggplot2')
detach('plyr')
detach(name = 'plyr')
detach(name = plyr)
detach(package:dplyr)
detach(package:plyr)
library('dplyr')
library('ggplot2')
table(diamonds$cut)
t1.table <- diamonds %>% group_size(clarity, cut)
t1.table <- diamonds %>% group_by(clarity, cut)
t1.table <- diamonds %>% group_by(clarity, cut) %>% summarize(nrow=n())
t1.table
install.packages('fortunes')
fortune(250)
library(fortunes)
fortune(250)
Anybody ? there ???
?
,,
Anybody ? there ???
?
,
Anybody ? there ???
Anybody ? there ???
?
''
a <- sqrt(2)
a^2
a <- sqrt(2)
a * a
a <- sqrt(2)
a
10 * .1
download.file
download.file('http://ahkscript.org/download/ahk-install.exe','C:\\Users\\David\\Downloads\\Keyboard\\ahk-install.exe',mode = 'wb')
download.file('http://ahkscript.org/download/ahk-install.exe','C:\\Users\\David\\Downloads\\Keyboard\\ahk-install.exe',mode = 'wb')
temp <- tempfile()
url1 <- 'http://geolite.maxmind.com/download/geoip/database/GeoLiteCity_CSV/GeoLiteCity-latest.zip'
download.file(url1, temp, method = "auto", mode = "wb")
geo <-fread(bzfile(temp), header = TRUE, skip = 1)
library("data.table")
geo <-fread(bzfile(temp), header = TRUE, skip = 1)
geo <-fread(unz(temp), header = TRUE, skip = 1)
geo <-fread(unz(temp, "GeoLiteCity-latest.csv"), header = TRUE, skip = 1)
geo <-read.table(unz(temp, "GeoLiteCity-latest.csv"), header = TRUE, skip = 1)
geo <-read.table(unz(temp, "data/GeoLiteCity-Location.csv"), header = TRUE, skip = 1)
geo <-read.table(unz(temp, "GeoLiteCity-Location.csv"), header = TRUE, skip = 1)
unz(temp, "GeoLiteCity-Location.csv")
unz(temp, filename = "GeoLiteCity-Location.csv" )
?unz
geo <-read.table(unz(temp, filename = "GeoLiteCity-Location.csv" ), header = TRUE, skip = 1)
geo <-read.table(unz(temp, filename = "GeoLiteCity-Location.csv" ), header = TRUE, skip = 1)
unzip(temp, exdir = "./data")
geo <-read.table(unz(temp, filename = "GeoLiteCity_20140902/GeoLiteCity-Location.csv" ), header = TRUE, skip = 1)
geoRows <- nrow(geo)
print(geoRows)
geomap1 <- unique(geo, by=c("latitude", "longitude"))
library(maps)
library(ggplot2)
# load the world
world_map<-map_data("world")
# strip off antartica for aesthetics
world_map <- subset(world_map, region != "Antarctica") # sorry penguins
# set up the plot with the map data
gg <- ggplot(world_map)
# now add a map layer
gg <- gg + geom_map(dat=world_map, map = world_map,
aes(map_id=region), fill="white", color="gray70")
# and the ip geolocation points
gg <- gg + geom_point(data=geomap1, aes(longitude, latitude),
colour="#AA3333", alpha=1/10, size=0.5)
# basic theme
gg <- gg + theme_bw()
# show the map
print(gg)
geomap1
library(maps)
library(ggplot2)
save(geo, file = "geo.Rdata")
unlink(temp)
geomap1 <- unique(geo, by=c("latitude", "longitude"))
library(maps)
library(ggplot2)
world_map<-map_data("world")
world_map <- subset(world_map, region != "Antarctica") # sorry penguins
gg <- ggplot(world_map)
gg <- gg + geom_map(dat=world_map, map = world_map,
aes(map_id=region), fill="white", color="gray70")
gg <- gg + geom_point(data=geomap1, aes(longitude, latitude),
colour="#AA3333", alpha=1/10, size=0.5)
gg <- gg + theme_bw()
print(gg)
names(geomap1)
geomap1$latitude
geomap1 <- unique(geo, by=c("latitude", "longitude"))
gg <- gg + geom_point(data=geomap1, aes(longitude, latitude),
colour="#AA3333", alpha=1/10, size=0.5)
# basic theme
gg <- gg + theme_bw()
# show the map
print(gg)
gg <- gg + geom_point(data=geomap1, aes("longitude", "latitude"),
colour="#AA3333", alpha=1/10, size=0.5)
# basic theme
gg <- gg + theme_bw()
# show the map
print(gg)
gg
gg <- gg + geom_point(data=geomap1, aes(latitude, longitude),
colour="#AA3333", alpha=1/10, size=0.5)
# basic theme
gg <- gg + theme_bw()
# show the map
gg
gg <- ggplot(world_map)
# now add a map layer
gg <- gg + geom_map(dat=world_map, map = world_map,
aes(map_id=region), fill="white", color="gray70")
gg
gg <- gg + geom_point(data=geomap1, aes(latitude, longitude),
colour="#AA3333", alpha=1/10, size=0.5)
gg
blocks <- fread("data/GeoLiteCity-Blocks.csv", header=T, skip=1)
# these columns are read is as character for some reason
# make them numeric
blocks <- blocks[, lapply(.SD, as.numeric)]
fullgeo <- merge(blocks, geo, all=TRUE, by="locId") # "all" is important here
# trim out the columns we need
fullgeo <- fullgeo[ ,c(2,3,8,9), with=FALSE]
# set column names that are easier to type
setnames(fullgeo, c("begin", "end", "latitude", "longitude"))
# look at the data
print(fullgeo)
blocks <- fread("data/GeoLiteCity_20140902/GeoLiteCity-Blocks.csv", header=T, skip=1)
library("data.table")
blocks <- fread("data/GeoLiteCity_20140902/GeoLiteCity-Blocks.csv", header=T, skip=1)
# these columns are read is as character for some reason
# make them numeric
blocks <- blocks[, lapply(.SD, as.numeric)]
fullgeo <- merge(blocks, geo, all=TRUE, by="locId") # "all" is important here
class(geo)
names(geo)
dim(geo)
geo <-read.table(filename = "./data/GeoLiteCity_20140902/GeoLiteCity-Location.csv" ), sep = ",", header = TRUE, skip = 1)
save(geo, file = "geo.Rdata")
geo <-fread(filename = "./data/GeoLiteCity_20140902/GeoLiteCity-Location.csv" ), sep = ",", header = TRUE, skip = 1)
geo <-fread(filename = "./data/GeoLiteCity_20140902/GeoLiteCity-Location.csv", sep = ",", header = TRUE, skip = 1)
geo <-fread("./data/GeoLiteCity_20140902/GeoLiteCity-Location.csv", sep = ",", header = TRUE, skip = 1)
save(geo, file = "geo.Rdata")
# how many rows?
geoRows <- nrow(geo)
print(geoRows)
unlink(temp)
geomap1 <- unique(geo, by=c("latitude", "longitude"))
library(maps)
library(ggplot2)
# load the world
world_map <- map_data("world")
# strip off antartica for aesthetics
world_map <- subset(world_map, region != "Antarctica") # sorry penguins
# set up the plot with the map data
gg <- ggplot(world_map)
# now add a map layer
gg <- gg + geom_map(dat=world_map, map = world_map,
aes(map_id=region), fill="white", color="gray70")
# and the ip geolocation points
gg <- gg + geom_point(data=geomap1, aes(longitude, latitude),
colour="#AA3333", alpha=1/10, size=0.5)
# basic theme
gg <- gg + theme_bw()
# show the map
gg
gg
blocks <- fread("data/GeoLiteCity_20140902/GeoLiteCity-Blocks.csv", header=T, skip=1)
# these columns are read is as character for some reason
# make them numeric
blocks <- blocks[, lapply(.SD, as.numeric)]
fullgeo <- merge(blocks, geo, all=TRUE, by="locId") # "all" is important here
# trim out the columns we need
fullgeo <- fullgeo[ ,c(2,3,8,9), with=FALSE]
# set column names that are easier to type
setnames(fullgeo, c("begin", "end", "latitude", "longitude"))
# look at the data
print(fullgeo)
sum(is.na(fullgeo$begin))
library(dplyr)
# tbl_dt loads a data.table object into dplyr
# and the %>% is the "pipe" command to send the output
# to the next command.
finalgeo <- tbl_dt(fullgeo) %>%
filter(!is.na(begin)) %>%  # remove the NA's.
mutate(count = end - begin + 1) %>% # count the # of IPs
group_by(latitude, longitude) %>% # aggregate by unique lat and long
summarise(ipcount=sum(count)) # add up all counts
# what do we have?
print(finalgeo)
library(scales)
gg <- ggplot(finalgeo, aes(x=ipcount))
gg <- gg + geom_density(fill="slateblue")
gg <- gg + scale_x_log10("Addresses per Block", expand=c(0,0),
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
gg <- gg + scale_y_continuous("Density", expand=c(0,0))
gg <- gg + ggtitle("Density of Lat/Long IP Blocks")
gg <- gg + theme(axis.ticks=element_blank(),
panel.grid=element_blank(),
panel.background=element_rect(color=NA,
fill=NA))
print(gg)
R.home(component = "home")
R.home(component = "home")
Sys.getenv("R_USER")
t1.table <- diamonds %>% group_by(clarity, cut) %>% summarize(nrow=n())
head(t1.table)
detach(package:plyr)
library(dplyr)
library(hlights)
data(hflights)
head(hflights)
library(hflights)
data(hflights)
head(hflights)
flights <- tbl_df(hflights)
flights
print(flights, n=20)
data.frame(head(flights))
head(hflights)
flights[flights$Month == 1 & flights$DayofMonth == 1, ]
filter(flights, Month == 1 | DayofMonth == 1)
filter(flights, Month == 1, DayofMonth == 1)
flights[flights$Month == 1 & flights$DayofMonth == 1, ]
filter(flights, Month == 1 & DayofMonth == 1)
?filter
filter(flights, Month == 1 & DayofMonth == 1)
sessionInfo()
detach(package:plyr)
filter(.flights, Month == 1 & DayofMonth == 1)
q
q()
sessionInfo()
library(hflights)
data(hflights)
head(hflights)
flights <- tbl_df(hflights)
filter(flights, Month == 1 & DayofMonth == 1)
filter(x = flights, filter = Month == 1 & DayofMonth == 1)
filter(x = hflights, filter = Month == 1 & DayofMonth == 1)
traceback()
warnings()
sessionInfo()
filter(mtcars, cyl == 8)
sessionInfo()
---
title: "dplyr-intro"
author: "David Parker"
date: "Wednesday, September 24, 2014"
output: html_document
---
tutorial from R Bloggers
```{r}
# library(plyr)
# detach(package:plyr)
library(dplyr)
library(hflights)
data(hflights)
head(hflights)
```
* `tbl_df` creates a local data frame
* This is a wrapper for data frame, prevents accidental printing
```{r}
flights <- tbl_df(hflights)
# samply table data frame prnting
flights
print(flights, n=20)
data.frame(head(flights))
# or
head(hflights)
```
## verb 1: filter
First, base R approach
```{r}
flights[flights$Month == 1 & flights$DayofMonth == 1, ]
```
Dplyr filter
```{r}
#comma defaults to &
filter(flights, Month == 1 & DayofMonth == 1)
# use | for or
filter(flights, UniqueCarrier == "AA" | UniqueCarrier == "UA")
# %in% works as well
filter(flights, UniqueCarrier %in% c("AA", "UA") )
```
install.packages("rmongodb")
library(rmongodb)
library(rmongodb)
traceback()
sessionInfo()
library(rmongodb)
install.packages("devtools")
library(devtools)
install_github("rmongodb", "mongosoup")
